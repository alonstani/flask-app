name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  GIT_REPO_URL: 'https://github.com/alonstani/flask-app.git'
  BRANCH_NAME: 'master'
  GIT_CREDENTIALS_ID: 'git-credential-id'
  DOCKERHUB_REPO: 'inyouk/flask-app'
  DOCKERHUB_CREDENTIALS_ID: 'docker-credential-id'

jobs:
  setup-docker:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Install Docker
      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get install \
            apt-transport-https \
            ca-certificates \
            curl \
            gnupg \
            lsb-release \
            -y
          
          # Add Docker GPG key
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install docker-ce docker-ce-cli containerd.io -y

      # Step 2: Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # Step 3: Upload Docker Compose as an artifact for use in subsequent jobs
      - name: Upload Docker Compose as artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose
          path: /usr/local/bin/docker-compose

  clone-code:
    runs-on: ubuntu-latest
    needs: setup-docker
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: List contents after checkout
        run: |
          echo "Listing contents of the current directory after checkout"
          pwd
          ls -alh

      - name: Upload code as artifact
        uses: actions/upload-artifact@v4
        with:
          name: flask-app-files
          path: .  # Upload entire repository

  build:
    runs-on: ubuntu-latest
    needs: clone-code
    steps:
      - name: Download the repository files
        uses: actions/download-artifact@v4
        with:
          name: flask-app-files
          path : ./flask-app

      - name: Download Docker Compose artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-compose
          path: /usr/local/bin

      - name: Ensure Docker Compose is available
        run: |
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Build Docker image
        run: |
          echo "Building the Docker image"
          cd ./flask-app
          sudo docker-compose build

  run:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download flask-app-files artifact
        uses: actions/download-artifact@v4
        with:
          name: flask-app-files
          path: /home/runner/work/flask-app/flask-app

      - name: Download Docker Compose
        uses: actions/download-artifact@v4
        with:
          name: docker-compose
          path: /usr/local/bin

      - name: Ensure Docker Compose is available
        run: |
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Start containers with docker-compose
        run: |
          cd /home/runner/work/flask-app/flask-app
          sudo docker-compose up -d  # Start containers
          sleep 10
          docker ps

  test:
    runs-on: ubuntu-latest
    needs: run
    steps:
      - name: Test Flask app
        run: |
          sleep 5
          docker ps --format "table {{.ID}}\t{{.Image}}\t{{.Names}}"
          curl -f http://localhost:5000 || echo "Flask app is not running as expected"

  push-docker-image:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Download the repository files
        uses: actions/download-artifact@v4
        with:
          name: flask-app-files
          path : ./flask-app

      - name: Download Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Navigate to Flask app directory
        run: |
          cd ./flask-app
          docker-compose build
          docker images

      - name: Tag Docker image
        run: |
          IMAGE_TAG="${DOCKERHUB_REPO}:${BRANCH_NAME}-latest"
          docker tag flask-app_flask-app ${IMAGE_TAG}

      - name: Push Docker image to Docker Hub
        run: |
          IMAGE_TAG="${DOCKERHUB_REPO}:${BRANCH_NAME}-latest"
          docker push ${IMAGE_TAG}

  deploy:
    runs-on: ubuntu-latest
    needs: push-docker-image  # Ensure deploy happens after pushing the Docker image
    steps:
      # Step 1: Set up SSH key for EC2 access
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${EC2_HOST} >> ~/.ssh/known_hosts
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}

      # Step 2: SSH into EC2, pull code from Git, and deploy using Docker Compose
      - name: SSH and deploy to EC2 using Docker Compose
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
            # Update the server
            sudo apt update
            cd /home/ec2-user/project/flask-app  # Ensure this is the correct path where your project is located
                    # Use Docker Compose to build and start containers
            sudo docker-compose down  # Stop and remove any existing containers
            sudo docker-compose up -d --build  # Build and start containers in detached mode

            # Optionally, you can also prune old containers, images, etc.
            sudo docker system prune -f
          EOF















