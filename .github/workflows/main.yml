name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  GIT_REPO_URL: 'https://github.com/alonstani/flask-app.git'
  BRANCH_NAME: 'master'
  GIT_CREDENTIALS_ID: 'git-credential-id'
  DOCKERHUB_REPO: 'inyouk/flask-app'
  DOCKERHUB_CREDENTIALS_ID: 'docker-credential-id'

jobs:
  setup-docker:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Install Docker
      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get install \
            apt-transport-https \
            ca-certificates \
            curl \
            gnupg \
            lsb-release \
            -y
          
          # Add Docker GPG key
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install docker-ce docker-ce-cli containerd.io -y

      # Step 2: Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          # Ensure Docker Compose is available
          docker-compose --version

      # Step 3: Upload Docker Compose as artifact (so it can be used in subsequent jobs)
      - name: Upload Docker Compose as artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-compose
          path: /usr/local/bin/docker-compose

  clone-code:
    runs-on: ubuntu-latest
    needs: setup-docker
    steps:
      # Step 1: Checkout code from the repository
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      # Step 2: List contents after checkout for debugging
      - name: List contents of the current directory after checkout
        run: |
          echo "Listing contents of the current directory after checkout"
          pwd
          ls -alh

      # Step 3: Upload code as artifact (so it can be used in subsequent jobs)
      - name: Upload code as artifact
        uses: actions/upload-artifact@v4
        with:
          name: flask-app-files
          path: .  # Upload entire repository
          if-no-files-found: warn
          compression-level: 6
          overwrite: false
          include-hidden-files: false

  build:
    runs-on: ubuntu-latest
    needs: clone-code
    steps:
      # Step 1: Download code artifact
      - name: Download the repository files
        uses: actions/download-artifact@v4
        with:
          name: flask-app-files

      # Step 2: Download Docker Compose artifact
      - name: Download Docker Compose
        uses: actions/download-artifact@v4
        with:
          name: docker-compose
          path: /usr/local/bin

      # Step 3: Ensure Docker Compose is available
      - name: Ensure Docker Compose is available
        run: |
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      # Step 4: Build Docker image using docker-compose
      - name: Build Docker image
        run: |
          echo "Building the Docker image"
          cd /home/runner/work/flask-app/flask-app
          echo "Listing files in the flask-app directory"
          ls -l
          
          # Ensure docker-compose.yml is in the correct location
          ls -l docker-compose.yaml
          
          # Build the Docker image
          sudo docker-compose build

  run:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Step 3: Start containers with docker-compose
      - name: Start containers with docker-compose
        run: |
          cd /home/runner/work/flask-app/flask-app
          pwd
          sudo docker-compose up -d
          sleep 10
          docker ps  # List running containers to confirm everything is up










